<launch>

    <arg name="arm" default="gen3_lite"/>
    <arg name="dof" default="6"/> 
    <arg name="gripper" default="gen3_lite_2f"/>
    <arg name="robot_name" default=""/>
    <arg name="prefix" default=""/>
    <arg name="cyclic_data_publish_rate" default="40"/> <!--Hz-->
    <arg name="debug" default="false" />
    <arg name="rviz_config" default="" />
    <arg     if="$(eval rviz_config=='')" name="command_args" value="" />
    <arg unless="$(eval rviz_config=='')" name="command_args" value="-d $(arg rviz_config)" />


    <arg name="marker_frame_id"     default="/base_link"/>
    <arg name="user_marker_size"	  default="12.3"/> <!-- 매우중요 -->
    
    <!-- Delay before homing the arm -->
    <arg name="start_delay_seconds" default="10"/>

    <!-- Start simulated Kortex Driver -->
    <!-- kortex_driver package must be installed -->
    <node name="kortex_driver" pkg="kortex_driver" type="kortex_arm_driver" output="screen"> <!--launch-prefix="gdb -ex run args"-->
        <param name="sim" value="true"/>
        <param name="cyclic_data_publish_rate" value="$(arg cyclic_data_publish_rate)"/>
        <param name="arm" value="$(arg arm)"/>
        <param name="gripper" value="$(arg gripper)"/>
        <param name="dof" value="$(arg dof)"/>
        <param name="robot_name" value="$(arg robot_name)"/>
        <param name="prefix" value="$(arg prefix)"/>
        <rosparam command="load" file="$(find jackal_kinova_gazebo)/urdf/$(arg arm)/$(arg dof)dof/config/joint_limits.yaml" subst_value="true"/>
        <rosparam command="load" file="$(find jackal_kinova_gazebo)/urdf/$(arg arm)/$(arg dof)dof/config/twist_limits.yaml" subst_value="true"/>
        <!-- If there is a gripper, load the active joint names for it -->
        <rosparam command="load" file="$(find jackal_kinova_gazebo)/urdf/$(arg gripper)/config/joint_limits.yaml" subst_value="true"/>
    </node>

    <!-- Launch MoveIt -->
    <include file="$(find jackal_kinova_moveit_config)/launch/move_group.launch">
        <arg name="dof" value="$(arg dof)"/>
        <arg name="prefix" value="$(arg prefix)"/>
    </include>

    <!-- Sleep, then unpause the physics in Gazebo and home the robot -->
    <node name="home_the_arm" pkg="jackal_kinova_moveit_config" type="home_robot.py" output="screen" respawn="false" launch-prefix="bash -c 'sleep $(arg start_delay_seconds); $0 $@'">
        <param name="robot_name" value="$(arg robot_name)"/>
    </node>
    
    <!-- Test if homing the robot with MoveIt ended correctly -->
    <test test-name="paramtest_gazebo_initialization" pkg="rostest" type="paramtest">
        <param name="param_name_target" value="is_initialized" />
        <param name="param_value_expected" value="true" />
        <param name="wait_time" value="60" />
    </test> 

    <!-- ar tracker for base_camera  -->
    <include file="$(find ar_track_alvar)/launch/pr2_indiv_h_d435.launch">
        <arg name="marker_size" value="$(arg user_marker_size)" />
        <arg name="max_new_marker_error" value="0.08" />
        <arg name="max_track_error" value="0.2" />
        <arg name="h_cam_image_topic" value="/base_camera/color/image_raw" />
        <arg name="h_cam_info_topic" value="/base_camera/color/camera_info" />
        <arg name="output_frame" value="base_camera_link" />
        
    </include> 

    <!-- ar tracker for hand_camera  -->
    <include file="$(find ar_track_alvar)/launch/pr2_indiv_g_d435.launch">
        <arg name="marker_size" value="$(arg user_marker_size)" />
        <arg name="max_new_marker_error" value="0.08" />
        <arg name="max_track_error" value="0.2" />
        <arg name="g_cam_image_topic" value="/hand_camera/color/image_raw" />
        <arg name="g_cam_info_topic" value="/hand_camera/color/camera_info" />
        <arg name="output_frame" value="hand_camera_link" />    
    </include> 

    <include file="$(find jackal_kinova_moveit_config)/launch/moveit_rviz.launch">
        <arg name="rviz_config" value="$(find jackal_kinova_moveit_config)/launch/omni.rviz"/>
        <arg name="debug" value="$(arg debug)"/>
    </include>
</launch>
